Library

As per simple English terminology – A library is a collection of sources of information and similar resources, made accessible to a defined community for reference or borrowing.

Now put that definition in the Custom Software Development context – What will be the collection of information? And why will a developer use it for reference? The basic building block of any application is its “Code”, and there are certain functionalities that any programmer needs to use repeatedly – then why to code it every time for different applications? That’s where a ‘Library’ comes to a rescue – a chunk of pre-defined code (a collection) that you can call (use for reference) from your own code, to help you do things (similar functionality) more quickly/easily.

example= NumPy , Scrapy-If you are involved in webscraping then this is a must have library for you. , 
 wxPython- A gui toolkit for python





API

Unlike English, not everything in this ‘Library’ is accessible directly. There will be back-end code to support the front-end code which needs to be accessible to programmers for Custom Software Development. Now how do a programmer access this front-end code? Yeah, the API – the Interface to Library.


An API (Application Programming Interface) are the functions/methods (the front-end code) in a library that you can call to ask it to do things for you – the interface to the library.

In general terms, it is a set of clearly defined methods of communication between various software components. A good API makes it easier to develop a computer program by providing all the building blocks, which are then put together by the programmer.

example= When used in the context of web development, an API is typically defined a set of specifications , such as Hypertext Transfer Protocol (HTTP) request messages, along with a definition of the structure of response messages, which is usually in an Extensible Markup Language (XML) or JavaScript Object Notation (JSON) format